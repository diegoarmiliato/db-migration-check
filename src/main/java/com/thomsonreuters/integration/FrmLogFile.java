package com.thomsonreuters.integration;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultHighlighter;

import com.thomsonreuters.integration.FileChecker.Files;
import com.thomsonreuters.integration.FileChecker.LoadedFiles;
import com.thomsonreuters.integration.FileChecker.LogErrors;

import org.apache.log4j.Logger;

public class FrmLogFile extends javax.swing.JFrame {
    
    /**
     *
     */
    private static final long serialVersionUID = 1L;
    private List<LoadedFiles> LoadedFiles = new ArrayList<LoadedFiles>();
    private List<Files> Files = new ArrayList<Files>();
    private List<LogErrors> LogErrors = new ArrayList<LogErrors>();

    private HashMap<String,Component> componentMap;
    
    private static final Logger logger = Logger.getLogger(FrmLogFile.class);

    /**
     * Creates new form FrmLogFile
     */
    public FrmLogFile() {
        initComponents();
        getParent().setEnabled(false);
    }
    
    public FrmLogFile(Container parent, List<Files> Files, List<LoadedFiles> LoadedFiles, List<LogErrors> LogErrors) {
        this.Files = Files;
        this.LoadedFiles = LoadedFiles;
        this.LogErrors = LogErrors;
        initComponents();
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {                
                parent.setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        onStart();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
        createComponentMap();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmLogFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmLogFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmLogFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmLogFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmLogFile().setVisible(true);
            }
        });        
    }
    
    private void onStart() {
        try {
            jTabbedPane1 = new javax.swing.JTabbedPane();
            
            logger.info("LoadedFiles Size " + LoadedFiles.size());
            
            int j = 0;

            for (int i=0; i < Files.size(); i++) {
                final JTextArea area = new JTextArea();
                final DefaultCaret caret = (DefaultCaret) area.getCaret();
                caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);                
                final Files File = Files.get(i);             
                StringBuffer text = new StringBuffer();
                while (j < LoadedFiles.size()) {
                    final LoadedFiles LoadedFile = LoadedFiles.get(j);
                    if (LoadedFile.FileName.matches(File.FileName)) {
                        text.append(LoadedFile.LineTxt);
                        text.append("\r\n");
                        j++;                        
                    } else {
                        break;
                    }
                }
                area.append(text.toString());
                area.setName(File.FileName);
                area.setCaretPosition(0);
                area.setEditable(false);
                final TextLineNumber textLineNumber = new TextLineNumber(area);
                new LinePainter(area);
                LogErrors.forEach(LogError -> {
                    if (LogError.FileName.matches(File.FileName)) {
                        try {
                            final int line = LogError.LineSeq-1;
                            final int begin = area.getLineStartOffset(line);
                            final int end = area.getLineEndOffset(line);
                            area.getHighlighter().addHighlight(begin, end, new DefaultHighlighter.DefaultHighlightPainter(Color.decode("#FF6347")));
                        } catch (BadLocationException e) {
                            logger.error(e);
                        }
                    }
                });
                CaretListener cListener = new CaretListener(){                
                    @Override
                    public void caretUpdate(CaretEvent evt) {
                        final JTextArea area = (JTextArea) evt.getSource();
                        final String fileName = area.getName();
                        final List<Integer> ErrorLines = new ArrayList<Integer>();
                        for (LogErrors LogError: LogErrors) {
                            if (LogError.FileName.matches(fileName)) {
                                // The JTextArea's index start at 0, but the FileLoader log control
                                // starts at 1
                                ErrorLines.add(LogError.LineSeq - 1);
                            }
                        }
                        if (!ErrorLines.isEmpty()) {
                            try {
                                final int currentLine = area.getLineOfOffset(area.getCaretPosition());
                                final int size = ErrorLines.size() - 1;
                                final JButton btnPrev = (JButton) getComponentByName("PREVIOUS" + fileName);                        
                                final JButton btnNext = (JButton) getComponentByName("NEXT" + fileName);
                                if (currentLine <= ErrorLines.get(0)) {
                                    btnPrev.setEnabled(false);
                                    if (size == 0) {
                                        btnNext.setEnabled(false);
                                    } else {
                                        btnNext.setEnabled(true);
                                    }                                    
                                } else if (currentLine >= ErrorLines.get(size)) {                                    
                                    btnNext.setEnabled(false);
                                    if (size == 0) {
                                        btnPrev.setEnabled(false);
                                    } else {
                                        btnPrev.setEnabled(true);
                                    }  
                                } else {
                                    btnPrev.setEnabled(true);
                                    btnNext.setEnabled(true);
                                }
                            } catch (BadLocationException e) {
                                logger.error(e);
                            }
                        }
                    }
                };
                area.addCaretListener(cListener);
                final JScrollPane scroll = new JScrollPane(area, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,  JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
                scroll.setName("Scroll" + File.FileName);
                scroll.setRowHeaderView(textLineNumber);
                JPanel bntPanel = new JPanel();
                bntPanel.setLayout(new BoxLayout(bntPanel, BoxLayout.X_AXIS));
                JButton btnPrev = mountPrevNextHandler(File.FileName, "PREVIOUS");
                JButton btnNext = mountPrevNextHandler(File.FileName, "NEXT");
                JPanel tabPanel = new JPanel();
                tabPanel.setLayout(new BoxLayout(tabPanel, BoxLayout.Y_AXIS));
                tabPanel.add(scroll);                
                bntPanel.add(btnPrev);          
                bntPanel.add(btnNext);
                tabPanel.add(bntPanel);
                String tabName = new String();
                if (File.FileStatus.matches("E")) {
                    tabName = "(ERROR) ";
                } else {
                    tabName = "(OK) ";
                }
                tabName = tabName.concat(File.FileName);
                jTabbedPane1.addTab(tabName, tabPanel);
            }
        } catch (Exception e) {
            logger.error(e);
        }
    }

    private JButton mountPrevNextHandler(String FileName, String type) {
        final JButton button = new JButton();
        button.setName(type + FileName);

        final List<Integer> ErrorLines = new ArrayList<Integer>();
        for (LogErrors LogError: LogErrors) {
            if (LogError.FileName.matches(FileName)) {
                // The JTextArea's index start at 0, but the FileLoader log control
                // starts at 1
                ErrorLines.add(LogError.LineSeq - 1);
            }
        }
        final List<Integer> RevErrorLines = new ArrayList<Integer>(ErrorLines);
        Collections.reverse(RevErrorLines);

        switch (type) {
            case "PREVIOUS":
                button.setText("Previous");
                button.setEnabled(false);
                button.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        JButton button = (JButton) evt.getSource();
                        if (button.isEnabled()) {
                            try {
                                final JTextArea area = (JTextArea) getComponentByName(FileName);
                                final int currentLine = area.getLineOfOffset(area.getCaretPosition());

                                int line = 0;
                                for (Integer errorLine : RevErrorLines) {                                                                        
                                    if (currentLine > errorLine) {
                                        try {
                                            line = errorLine;
                                            final int destination = area.getLineStartOffset(line);
                                            area.requestFocus();
                                            area.setCaretPosition(destination);
                                            break;
                                        } catch (BadLocationException e) {
                                            logger.error(e);
                                        }
                                    }
                                }
                                if (line == 0) {
                                    button.setEnabled(false);
                                }
                            } catch (Exception e) {
                                logger.error(e);
                            }
                        }                        
                    }
                });
                break;
            case "NEXT":
                button.setText("Next");
                if (ErrorLines.isEmpty()) {
                    button.setEnabled(false);
                } else {
                    button.setEnabled(true);    
                }
                button.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        JButton button = (JButton) evt.getSource();
                        if (button.isEnabled()) {
                            try {
                                final JTextArea area = (JTextArea) getComponentByName(FileName);
                                final int currentLine = area.getLineOfOffset(area.getCaretPosition());

                                int line = 0;
                                for (Integer errorLine : ErrorLines) {                                                                        
                                    if (currentLine < errorLine) {
                                        try {
                                            line = errorLine;
                                            final int destination = area.getLineStartOffset(line);
                                            area.requestFocus();
                                            area.setCaretPosition(destination);
                                            break;
                                        } catch (BadLocationException e) {
                                            logger.error(e);
                                        }
                                    }
                                }
                                if (line == 0) {
                                    button.setEnabled(false);
                                }
                            } catch (Exception e) {
                                logger.error(e);
                            }
                        }                        
                    }
                });
                break;
            default:
                break;
        }

        return button;
    }

    private void createComponentMap() {
        componentMap = new HashMap<String,Component>();
        List<Component> components = getAllComponents(this);
        for (Component comp : components) {
            componentMap.put(comp.getName(), comp);
        }
    }

    private List<Component> getAllComponents(final Container c) {
        Component[] comps = c.getComponents();
        List<Component> compList = new ArrayList<Component>();
        for (Component comp : comps) {
            compList.add(comp);
            if (comp instanceof Container)
                compList.addAll(getAllComponents((Container) comp));
        }
        return compList;
    }

    public Component getComponentByName(String name) {
        if (componentMap.containsKey(name)) {
            return (Component) componentMap.get(name);
        }
        else return null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
