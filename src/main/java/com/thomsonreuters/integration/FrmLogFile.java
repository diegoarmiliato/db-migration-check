package com.thomsonreuters.integration;

import com.thomsonreuters.integration.FileChecker.LoadedFiles;
import com.thomsonreuters.integration.FileChecker.Files;
import com.thomsonreuters.integration.FileChecker.LogErrors;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import org.apache.log4j.Logger;

public class FrmLogFile extends javax.swing.JFrame {
    
    private List<LoadedFiles> LoadedFiles = new ArrayList<LoadedFiles>();
    private List<Files> Files = new ArrayList<Files>();
    private List<LogErrors> LogErrors = new ArrayList<LogErrors>();
    
    private static final Logger logger = Logger.getLogger(FrmLogFile.class);

    /**
     * Creates new form FrmLogFile
     */
    public FrmLogFile() {
        initComponents();
    }
    
    public FrmLogFile(List<Files> Files, List<LoadedFiles> LoadedFiles, List<LogErrors> LogErrors) {
        this.Files = Files;
        this.LoadedFiles = LoadedFiles;
        this.LogErrors = LogErrors;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        teste();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmLogFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmLogFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmLogFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmLogFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmLogFile().setVisible(true);
            }
        });        
    }
    
    private void teste() {
        try {
            jTabbedPane1 = new javax.swing.JTabbedPane();
            
            logger.info("LoadedFiles Size " + LoadedFiles.size());
            
            int j = 0;

            for (int i=0; i < Files.size(); i++) {
                final JTextArea area = new JTextArea();
                final Files File = Files.get(i);             
                StringBuffer text = new StringBuffer();
                while (j < LoadedFiles.size()) {
                    final LoadedFiles LoadedFile = LoadedFiles.get(j);
                    if (LoadedFile.FileName.matches(File.FileName)) {
                        text.append(LoadedFile.LineTxt);
                        text.append("\r\n");
                        j++;                        
                    } else {
                        break;
                    }
                }
                area.append(text.toString());
                for (LogErrors LogError: LogErrors) {
                    if (LogError.FileName.matches(File.FileName)) {
                        final int line = LogError.LineSeq-1;
                        final int begin = area.getLineStartOffset(line);
                        final int end = area.getLineEndOffset(line);
                        area.getHighlighter().addHighlight(begin, end, new DefaultHighlighter.DefaultHighlightPainter(Color.red));
                    } else {
                        break;
                    }
                }             
                final JScrollPane scroll = new JScrollPane(area, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,  JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);                
                jTabbedPane1.addTab(File.FileName, scroll);
            }
        } catch (Exception e) {
            logger.error(e);
        }
    }
    
    private void newTeste() {
        try {        
            for (int i=0; i < Files.size(); i++) {
                final Files File = Files.get(i);
                for (int j=0; j < LoadedFiles.size(); j++) {
                    String text = new String();
                    final LoadedFiles LoadedFile = LoadedFiles.get(j);
                    final JTextArea area = (JTextArea) jTabbedPane1.getTabComponentAt(i+1);
                    if (LoadedFile.FileName.matches(File.FileName)) {
                        if(text.isEmpty()) {
                            text = LoadedFile.LineTxt;
                        } else {
                            text = text.concat("\r\n").concat(LoadedFile.LineTxt);
                        }
                    }
                    area.append(text);
                }
                final JTextArea area = new JTextArea();
                jTabbedPane1.addTab(File.FileName, area);
            }
        } catch(Exception e) {
            logger.error(e);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
