package com.thomsonreuters.integration;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.log4j.Logger;

public class InitFrame extends javax.swing.JFrame {
    
    private InitFrameController controller = new InitFrameController();
    private Logger logger = Logger.getLogger(InitFrame.class);

    public InitFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        chkLogFile = new javax.swing.JCheckBox();
        txtFileName = new javax.swing.JTextField();
        btnValidateFile = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jProgressBar1 = new javax.swing.JProgressBar();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(100, 100));
        setResizable(false);

        chkLogFile.setText("Validate Log File");
        chkLogFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogFileCheckHandler(evt);
            }
        });

        txtFileName.setEnabled(false);
        txtFileName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                FileNameFocusLost(evt);
            }
        });
        txtFileName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                FilePicker(evt);
            }
        });

        btnValidateFile.setText("Validate");
        btnValidateFile.setEnabled(false);
        btnValidateFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ValidateFile(evt);
            }
        });

        jCheckBox1.setText("jCheckBox1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(txtFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnValidateFile))
                            .addComponent(chkLogFile)
                            .addComponent(jCheckBox1))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkLogFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnValidateFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(jCheckBox1)
                .addContainerGap(168, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LogFileCheckHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogFileCheckHandler
        if (this.chkLogFile.isSelected()) {
            txtFileName.setEnabled(true);
            if (txtFileName.getText().isEmpty()) {
                btnValidateFile.setEnabled(false);
            } else {
                btnValidateFile.setEnabled(true);
            }
        } else {
            txtFileName.setEnabled(false);
            btnValidateFile.setEnabled(false);
        }
    }//GEN-LAST:event_LogFileCheckHandler

    private void FilePicker(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FilePicker
        if (txtFileName.isEnabled()) {
            final FileNameExtensionFilter filter = new FileNameExtensionFilter("Text/Log Files", "txt", "log");           
            final JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileFilter(filter);
            final int returnVal = fileChooser.showOpenDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                final File file = fileChooser.getSelectedFile();
                txtFileName.setText(file.getAbsolutePath());
                btnValidateFile.setEnabled(true);
            }
        }
    }//GEN-LAST:event_FilePicker

    private void FileNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_FileNameFocusLost
        if (txtFileName.getText().isEmpty()) {
            btnValidateFile.setEnabled(false);
        } else {
            btnValidateFile.setEnabled(true);
        }
    }//GEN-LAST:event_FileNameFocusLost

    private void ValidateFile(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ValidateFile
        class MyWorker extends SwingWorker<String, Object> {
            protected String doInBackground() {
                chkLogFile.setEnabled(false);
                txtFileName.setEnabled(false);
                btnValidateFile.setEnabled(false);
                jProgressBar1.setVisible(true);
                jProgressBar1.setIndeterminate(true);
                FileChecker flch = new FileChecker(new File(txtFileName.getText()));
                try {
                    flch.run();
                } catch (IOException e) {
                    logger.error(e);
                }
                return "Done";
            }
            
            protected void done() {
                jProgressBar1.setVisible(false);
                chkLogFile.setEnabled(true);
                txtFileName.setEnabled(true);
                btnValidateFile.setEnabled(true);
            }
        }    
        new MyWorker().execute();
    }//GEN-LAST:event_ValidateFile

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InitFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InitFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InitFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InitFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InitFrame().setVisible(true);
            }
        });
    }
    
    private void ProgressCheck() {
        for(int i =0; i<= 100; i+=10) {
            final int progress = i;
            
            try {
                SwingUtilities.invokeAndWait(new Runnable() {
                    @Override
                    public void run() {
                        jProgressBar1.setValue(progress);
                        txtFileName.setText(txtFileName.getText() + String.format("Completed %d%% of task.\n", progress));
                    }
                });
            } catch (InterruptedException ex) {
                java.util.logging.Logger.getLogger(InitFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvocationTargetException ex) {
                java.util.logging.Logger.getLogger(InitFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnValidateFile;
    private javax.swing.JCheckBox chkLogFile;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JTextField txtFileName;
    // End of variables declaration//GEN-END:variables
}
